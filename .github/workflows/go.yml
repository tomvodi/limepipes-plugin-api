# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

env:
  GO_VERSION: '1.22.4'

on:
  push:
  pull_request:
    branches: [ "master" ]

jobs:
  linting:
    name: Linting with golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60

#  test-and-coverage:
#    name: Go test and coverage check
#    runs-on: ubuntu-latest
#
#    services:
#      postgres:
#        image: postgres
#        env:
#          POSTGRES_PASSWORD: postgres
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432:5432
#
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: ${{ env.GO_VERSION }}
#
#      - name: Create default config
#        run: cp limepipes.env.default limepipes.env
#
#      - name: generate test coverage
#        run: go test ./... -coverprofile=./cover.out -covermode=atomic -coverpkg=./...
#        env:
#          DB_PASSWORD: postgres
#          DB_USER: postgres
#          DB_NAME: postgres
#
#      - name: check test coverage
#        uses: vladopajic/go-test-coverage@v2
#        with:
#          config: ./.testcoverage.yaml

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
  
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
        
      - name: Build
        run: go build -v ./...