// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/tomvodi/limepipes-plugin-api/plugin/v1/messages"

	tune "github.com/tomvodi/limepipes-plugin-api/musicmodel/v1/tune"
)

// LimePipesPlugin is an autogenerated mock type for the LimePipesPlugin type
type LimePipesPlugin struct {
	mock.Mock
}

type LimePipesPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *LimePipesPlugin) EXPECT() *LimePipesPlugin_Expecter {
	return &LimePipesPlugin_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: tunes
func (_m *LimePipesPlugin) Export(tunes []*tune.Tune) ([]byte, error) {
	ret := _m.Called(tunes)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func([]*tune.Tune) ([]byte, error)); ok {
		return rf(tunes)
	}
	if rf, ok := ret.Get(0).(func([]*tune.Tune) []byte); ok {
		r0 = rf(tunes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func([]*tune.Tune) error); ok {
		r1 = rf(tunes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type LimePipesPlugin_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - tunes []*tune.Tune
func (_e *LimePipesPlugin_Expecter) Export(tunes interface{}) *LimePipesPlugin_Export_Call {
	return &LimePipesPlugin_Export_Call{Call: _e.mock.On("Export", tunes)}
}

func (_c *LimePipesPlugin_Export_Call) Run(run func(tunes []*tune.Tune)) *LimePipesPlugin_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*tune.Tune))
	})
	return _c
}

func (_c *LimePipesPlugin_Export_Call) Return(_a0 []byte, _a1 error) *LimePipesPlugin_Export_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_Export_Call) RunAndReturn(run func([]*tune.Tune) ([]byte, error)) *LimePipesPlugin_Export_Call {
	_c.Call.Return(run)
	return _c
}

// ExportToFile provides a mock function with given fields: tunes, filepath
func (_m *LimePipesPlugin) ExportToFile(tunes []*tune.Tune, filepath string) error {
	ret := _m.Called(tunes, filepath)

	if len(ret) == 0 {
		panic("no return value specified for ExportToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*tune.Tune, string) error); ok {
		r0 = rf(tunes, filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LimePipesPlugin_ExportToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportToFile'
type LimePipesPlugin_ExportToFile_Call struct {
	*mock.Call
}

// ExportToFile is a helper method to define mock.On call
//   - tunes []*tune.Tune
//   - filepath string
func (_e *LimePipesPlugin_Expecter) ExportToFile(tunes interface{}, filepath interface{}) *LimePipesPlugin_ExportToFile_Call {
	return &LimePipesPlugin_ExportToFile_Call{Call: _e.mock.On("ExportToFile", tunes, filepath)}
}

func (_c *LimePipesPlugin_ExportToFile_Call) Run(run func(tunes []*tune.Tune, filepath string)) *LimePipesPlugin_ExportToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*tune.Tune), args[1].(string))
	})
	return _c
}

func (_c *LimePipesPlugin_ExportToFile_Call) Return(_a0 error) *LimePipesPlugin_ExportToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LimePipesPlugin_ExportToFile_Call) RunAndReturn(run func([]*tune.Tune, string) error) *LimePipesPlugin_ExportToFile_Call {
	_c.Call.Return(run)
	return _c
}

// Parse provides a mock function with given fields: data
func (_m *LimePipesPlugin) Parse(data []byte) ([]*messages.ParsedTune, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []*messages.ParsedTune
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]*messages.ParsedTune, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) []*messages.ParsedTune); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*messages.ParsedTune)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_Parse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Parse'
type LimePipesPlugin_Parse_Call struct {
	*mock.Call
}

// Parse is a helper method to define mock.On call
//   - data []byte
func (_e *LimePipesPlugin_Expecter) Parse(data interface{}) *LimePipesPlugin_Parse_Call {
	return &LimePipesPlugin_Parse_Call{Call: _e.mock.On("Parse", data)}
}

func (_c *LimePipesPlugin_Parse_Call) Run(run func(data []byte)) *LimePipesPlugin_Parse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *LimePipesPlugin_Parse_Call) Return(_a0 []*messages.ParsedTune, _a1 error) *LimePipesPlugin_Parse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_Parse_Call) RunAndReturn(run func([]byte) ([]*messages.ParsedTune, error)) *LimePipesPlugin_Parse_Call {
	_c.Call.Return(run)
	return _c
}

// ParseFromFile provides a mock function with given fields: filePath
func (_m *LimePipesPlugin) ParseFromFile(filePath string) ([]*messages.ParsedTune, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ParseFromFile")
	}

	var r0 []*messages.ParsedTune
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*messages.ParsedTune, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) []*messages.ParsedTune); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*messages.ParsedTune)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_ParseFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseFromFile'
type LimePipesPlugin_ParseFromFile_Call struct {
	*mock.Call
}

// ParseFromFile is a helper method to define mock.On call
//   - filePath string
func (_e *LimePipesPlugin_Expecter) ParseFromFile(filePath interface{}) *LimePipesPlugin_ParseFromFile_Call {
	return &LimePipesPlugin_ParseFromFile_Call{Call: _e.mock.On("ParseFromFile", filePath)}
}

func (_c *LimePipesPlugin_ParseFromFile_Call) Run(run func(filePath string)) *LimePipesPlugin_ParseFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LimePipesPlugin_ParseFromFile_Call) Return(_a0 []*messages.ParsedTune, _a1 error) *LimePipesPlugin_ParseFromFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_ParseFromFile_Call) RunAndReturn(run func(string) ([]*messages.ParsedTune, error)) *LimePipesPlugin_ParseFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// PluginInfo provides a mock function with given fields:
func (_m *LimePipesPlugin) PluginInfo() (*messages.PluginInfoResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginInfo")
	}

	var r0 *messages.PluginInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*messages.PluginInfoResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *messages.PluginInfoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.PluginInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_PluginInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginInfo'
type LimePipesPlugin_PluginInfo_Call struct {
	*mock.Call
}

// PluginInfo is a helper method to define mock.On call
func (_e *LimePipesPlugin_Expecter) PluginInfo() *LimePipesPlugin_PluginInfo_Call {
	return &LimePipesPlugin_PluginInfo_Call{Call: _e.mock.On("PluginInfo")}
}

func (_c *LimePipesPlugin_PluginInfo_Call) Run(run func()) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LimePipesPlugin_PluginInfo_Call) Return(_a0 *messages.PluginInfoResponse, _a1 error) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_PluginInfo_Call) RunAndReturn(run func() (*messages.PluginInfoResponse, error)) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewLimePipesPlugin creates a new instance of LimePipesPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimePipesPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *LimePipesPlugin {
	mock := &LimePipesPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
