// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	messages "github.com/tomvodi/limepipes-plugin-api/plugin/v1/messages"
)

// LimePipesPlugin is an autogenerated mock type for the LimePipesPlugin type
type LimePipesPlugin struct {
	mock.Mock
}

type LimePipesPlugin_Expecter struct {
	mock *mock.Mock
}

func (_m *LimePipesPlugin) EXPECT() *LimePipesPlugin_Expecter {
	return &LimePipesPlugin_Expecter{mock: &_m.Mock}
}

// Import provides a mock function with given fields: data
func (_m *LimePipesPlugin) Import(data []byte) (*messages.ImportFileResponse, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for Import")
	}

	var r0 *messages.ImportFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*messages.ImportFileResponse, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func([]byte) *messages.ImportFileResponse); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.ImportFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_Import_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Import'
type LimePipesPlugin_Import_Call struct {
	*mock.Call
}

// Import is a helper method to define mock.On call
//   - data []byte
func (_e *LimePipesPlugin_Expecter) Import(data interface{}) *LimePipesPlugin_Import_Call {
	return &LimePipesPlugin_Import_Call{Call: _e.mock.On("Import", data)}
}

func (_c *LimePipesPlugin_Import_Call) Run(run func(data []byte)) *LimePipesPlugin_Import_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *LimePipesPlugin_Import_Call) Return(_a0 *messages.ImportFileResponse, _a1 error) *LimePipesPlugin_Import_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_Import_Call) RunAndReturn(run func([]byte) (*messages.ImportFileResponse, error)) *LimePipesPlugin_Import_Call {
	_c.Call.Return(run)
	return _c
}

// ImportLocalFile provides a mock function with given fields: filePath
func (_m *LimePipesPlugin) ImportLocalFile(filePath string) (*messages.ImportFileResponse, error) {
	ret := _m.Called(filePath)

	if len(ret) == 0 {
		panic("no return value specified for ImportLocalFile")
	}

	var r0 *messages.ImportFileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*messages.ImportFileResponse, error)); ok {
		return rf(filePath)
	}
	if rf, ok := ret.Get(0).(func(string) *messages.ImportFileResponse); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.ImportFileResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_ImportLocalFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImportLocalFile'
type LimePipesPlugin_ImportLocalFile_Call struct {
	*mock.Call
}

// ImportLocalFile is a helper method to define mock.On call
//   - filePath string
func (_e *LimePipesPlugin_Expecter) ImportLocalFile(filePath interface{}) *LimePipesPlugin_ImportLocalFile_Call {
	return &LimePipesPlugin_ImportLocalFile_Call{Call: _e.mock.On("ImportLocalFile", filePath)}
}

func (_c *LimePipesPlugin_ImportLocalFile_Call) Run(run func(filePath string)) *LimePipesPlugin_ImportLocalFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LimePipesPlugin_ImportLocalFile_Call) Return(_a0 *messages.ImportFileResponse, _a1 error) *LimePipesPlugin_ImportLocalFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_ImportLocalFile_Call) RunAndReturn(run func(string) (*messages.ImportFileResponse, error)) *LimePipesPlugin_ImportLocalFile_Call {
	_c.Call.Return(run)
	return _c
}

// PluginInfo provides a mock function with given fields:
func (_m *LimePipesPlugin) PluginInfo() (*messages.PluginInfoResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for PluginInfo")
	}

	var r0 *messages.PluginInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*messages.PluginInfoResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *messages.PluginInfoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*messages.PluginInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LimePipesPlugin_PluginInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginInfo'
type LimePipesPlugin_PluginInfo_Call struct {
	*mock.Call
}

// PluginInfo is a helper method to define mock.On call
func (_e *LimePipesPlugin_Expecter) PluginInfo() *LimePipesPlugin_PluginInfo_Call {
	return &LimePipesPlugin_PluginInfo_Call{Call: _e.mock.On("PluginInfo")}
}

func (_c *LimePipesPlugin_PluginInfo_Call) Run(run func()) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LimePipesPlugin_PluginInfo_Call) Return(_a0 *messages.PluginInfoResponse, _a1 error) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LimePipesPlugin_PluginInfo_Call) RunAndReturn(run func() (*messages.PluginInfoResponse, error)) *LimePipesPlugin_PluginInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewLimePipesPlugin creates a new instance of LimePipesPlugin. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLimePipesPlugin(t interface {
	mock.TestingT
	Cleanup(func())
}) *LimePipesPlugin {
	mock := &LimePipesPlugin{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
