// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: plugin/v1/plugin.proto

package pluginv1

import (
	context "context"
	messages "github.com/tomvodi/limepipes-plugin-api/plugin/v1/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PluginService_PluginInfo_FullMethodName    = "/plugin.v1.PluginService/PluginInfo"
	PluginService_ParseFromFile_FullMethodName = "/plugin.v1.PluginService/ParseFromFile"
	PluginService_Parse_FullMethodName         = "/plugin.v1.PluginService/Parse"
	PluginService_Export_FullMethodName        = "/plugin.v1.PluginService/Export"
	PluginService_ExportToFile_FullMethodName  = "/plugin.v1.PluginService/ExportToFile"
)

// PluginServiceClient is the client API for PluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServiceClient interface {
	PluginInfo(ctx context.Context, in *messages.PluginInfoRequest, opts ...grpc.CallOption) (*messages.PluginInfoResponse, error)
	// ParseFromFile parses a local file and returns the tunes in the file.
	// When the filetype is not supported by the plugin it returns an UNIMPLEMENTED error.
	ParseFromFile(ctx context.Context, in *messages.ParseFromFileRequest, opts ...grpc.CallOption) (*messages.ParseFromFileResponse, error)
	// Parse parses the data and returns the tunes from it.
	Parse(ctx context.Context, in *messages.ParseRequest, opts ...grpc.CallOption) (*messages.ParseResponse, error)
	// Export exports the tunes to data that can be restored to a file.
	Export(ctx context.Context, in *messages.ExportRequest, opts ...grpc.CallOption) (*messages.ExportResponse, error)
	// ExportToFile exports the tunes to a local file.
	ExportToFile(ctx context.Context, in *messages.ExportToFileRequest, opts ...grpc.CallOption) (*messages.ExportToFileResponse, error)
}

type pluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServiceClient(cc grpc.ClientConnInterface) PluginServiceClient {
	return &pluginServiceClient{cc}
}

func (c *pluginServiceClient) PluginInfo(ctx context.Context, in *messages.PluginInfoRequest, opts ...grpc.CallOption) (*messages.PluginInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.PluginInfoResponse)
	err := c.cc.Invoke(ctx, PluginService_PluginInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ParseFromFile(ctx context.Context, in *messages.ParseFromFileRequest, opts ...grpc.CallOption) (*messages.ParseFromFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ParseFromFileResponse)
	err := c.cc.Invoke(ctx, PluginService_ParseFromFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Parse(ctx context.Context, in *messages.ParseRequest, opts ...grpc.CallOption) (*messages.ParseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ParseResponse)
	err := c.cc.Invoke(ctx, PluginService_Parse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) Export(ctx context.Context, in *messages.ExportRequest, opts ...grpc.CallOption) (*messages.ExportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ExportResponse)
	err := c.cc.Invoke(ctx, PluginService_Export_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginServiceClient) ExportToFile(ctx context.Context, in *messages.ExportToFileRequest, opts ...grpc.CallOption) (*messages.ExportToFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(messages.ExportToFileResponse)
	err := c.cc.Invoke(ctx, PluginService_ExportToFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServiceServer is the server API for PluginService service.
// All implementations must embed UnimplementedPluginServiceServer
// for forward compatibility.
type PluginServiceServer interface {
	PluginInfo(context.Context, *messages.PluginInfoRequest) (*messages.PluginInfoResponse, error)
	// ParseFromFile parses a local file and returns the tunes in the file.
	// When the filetype is not supported by the plugin it returns an UNIMPLEMENTED error.
	ParseFromFile(context.Context, *messages.ParseFromFileRequest) (*messages.ParseFromFileResponse, error)
	// Parse parses the data and returns the tunes from it.
	Parse(context.Context, *messages.ParseRequest) (*messages.ParseResponse, error)
	// Export exports the tunes to data that can be restored to a file.
	Export(context.Context, *messages.ExportRequest) (*messages.ExportResponse, error)
	// ExportToFile exports the tunes to a local file.
	ExportToFile(context.Context, *messages.ExportToFileRequest) (*messages.ExportToFileResponse, error)
	mustEmbedUnimplementedPluginServiceServer()
}

// UnimplementedPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPluginServiceServer struct{}

func (UnimplementedPluginServiceServer) PluginInfo(context.Context, *messages.PluginInfoRequest) (*messages.PluginInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PluginInfo not implemented")
}
func (UnimplementedPluginServiceServer) ParseFromFile(context.Context, *messages.ParseFromFileRequest) (*messages.ParseFromFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParseFromFile not implemented")
}
func (UnimplementedPluginServiceServer) Parse(context.Context, *messages.ParseRequest) (*messages.ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedPluginServiceServer) Export(context.Context, *messages.ExportRequest) (*messages.ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedPluginServiceServer) ExportToFile(context.Context, *messages.ExportToFileRequest) (*messages.ExportToFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportToFile not implemented")
}
func (UnimplementedPluginServiceServer) mustEmbedUnimplementedPluginServiceServer() {}
func (UnimplementedPluginServiceServer) testEmbeddedByValue()                       {}

// UnsafePluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServiceServer will
// result in compilation errors.
type UnsafePluginServiceServer interface {
	mustEmbedUnimplementedPluginServiceServer()
}

func RegisterPluginServiceServer(s grpc.ServiceRegistrar, srv PluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PluginService_ServiceDesc, srv)
}

func _PluginService_PluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.PluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).PluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_PluginInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).PluginInfo(ctx, req.(*messages.PluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ParseFromFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ParseFromFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ParseFromFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ParseFromFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ParseFromFile(ctx, req.(*messages.ParseFromFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Parse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Parse(ctx, req.(*messages.ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_Export_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).Export(ctx, req.(*messages.ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PluginService_ExportToFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.ExportToFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServiceServer).ExportToFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PluginService_ExportToFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServiceServer).ExportToFile(ctx, req.(*messages.ExportToFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PluginService_ServiceDesc is the grpc.ServiceDesc for PluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.v1.PluginService",
	HandlerType: (*PluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PluginInfo",
			Handler:    _PluginService_PluginInfo_Handler,
		},
		{
			MethodName: "ParseFromFile",
			Handler:    _PluginService_ParseFromFile_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _PluginService_Parse_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _PluginService_Export_Handler,
		},
		{
			MethodName: "ExportToFile",
			Handler:    _PluginService_ExportToFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin/v1/plugin.proto",
}
